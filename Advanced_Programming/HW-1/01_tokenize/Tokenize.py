# Generated from Tokenize.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,1,0,1,0,1,0,1,1,3,1,33,8,1,1,1,4,1,36,8,1,11,1,12,1,37,1,1,4,1,
        41,8,1,11,1,12,1,42,1,2,3,2,46,8,2,1,2,1,2,4,2,50,8,2,11,2,12,2,
        51,1,3,3,3,55,8,3,1,3,1,3,1,3,4,3,60,8,3,11,3,12,3,61,1,4,3,4,65,
        8,4,1,4,5,4,68,8,4,10,4,12,4,71,9,4,1,4,1,4,5,4,75,8,4,10,4,12,4,
        78,9,4,1,4,1,4,3,4,82,8,4,3,4,84,8,4,1,4,5,4,87,8,4,10,4,12,4,90,
        9,4,1,4,4,4,93,8,4,11,4,12,4,94,1,4,1,4,3,4,99,8,4,1,4,4,4,102,8,
        4,11,4,12,4,103,3,4,106,8,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,114,8,5,
        10,5,12,5,117,9,5,1,5,3,5,120,8,5,3,5,122,8,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,4,6,134,8,6,11,6,12,6,135,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,150,8,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,3,7,159,8,7,1,8,1,8,1,8,1,8,3,8,165,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,4,8,177,8,8,11,8,12,8,178,3,8,181,8,8,1,
        9,1,9,1,9,1,9,1,10,3,10,188,8,10,1,10,5,10,191,8,10,10,10,12,10,
        194,9,10,1,10,3,10,197,8,10,1,10,4,10,200,8,10,11,10,12,10,201,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,211,8,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,3,11,222,8,11,1,12,1,12,1,12,1,12,1,
        12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,1,0,36,2,0,9,10,32,32,2,0,43,43,45,45,1,0,49,57,1,0,48,
        57,1,0,48,48,1,0,48,55,1,0,120,120,3,0,48,57,65,70,97,102,1,0,46,
        46,1,0,101,101,1,0,39,39,1,0,92,92,5,0,34,34,39,39,92,92,110,110,
        116,116,1,0,117,117,1,0,34,34,2,0,34,34,92,92,1,0,45,45,1,0,49,49,
        1,0,48,50,1,0,49,50,1,0,51,51,1,0,48,49,1,0,50,50,1,0,48,51,1,0,
        58,58,1,0,48,53,1,0,84,84,1,0,110,110,1,0,115,115,1,0,109,109,3,
        0,104,104,109,109,115,115,1,0,116,116,1,0,114,114,1,0,102,102,1,
        0,97,97,1,0,108,108,265,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,
        1,0,0,0,3,32,1,0,0,0,5,45,1,0,0,0,7,54,1,0,0,0,9,64,1,0,0,0,11,107,
        1,0,0,0,13,125,1,0,0,0,15,139,1,0,0,0,17,164,1,0,0,0,19,182,1,0,
        0,0,21,187,1,0,0,0,23,221,1,0,0,0,25,223,1,0,0,0,27,28,7,0,0,0,28,
        29,1,0,0,0,29,30,6,0,0,0,30,2,1,0,0,0,31,33,7,1,0,0,32,31,1,0,0,
        0,32,33,1,0,0,0,33,35,1,0,0,0,34,36,7,2,0,0,35,34,1,0,0,0,36,37,
        1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,41,7,3,0,0,
        40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,4,1,0,
        0,0,44,46,7,1,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,49,
        7,4,0,0,48,50,7,5,0,0,49,48,1,0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,
        51,52,1,0,0,0,52,6,1,0,0,0,53,55,7,1,0,0,54,53,1,0,0,0,54,55,1,0,
        0,0,55,56,1,0,0,0,56,57,7,4,0,0,57,59,7,6,0,0,58,60,7,7,0,0,59,58,
        1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,8,1,0,0,0,63,
        65,7,1,0,0,64,63,1,0,0,0,64,65,1,0,0,0,65,105,1,0,0,0,66,68,7,3,
        0,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,
        1,0,0,0,71,69,1,0,0,0,72,76,7,8,0,0,73,75,7,3,0,0,74,73,1,0,0,0,
        75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,83,1,0,0,0,78,76,1,
        0,0,0,79,81,7,9,0,0,80,82,7,1,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,
        84,1,0,0,0,83,79,1,0,0,0,83,84,1,0,0,0,84,88,1,0,0,0,85,87,7,3,0,
        0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,106,
        1,0,0,0,90,88,1,0,0,0,91,93,7,3,0,0,92,91,1,0,0,0,93,94,1,0,0,0,
        94,92,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,98,7,9,0,0,97,99,7,
        1,0,0,98,97,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,102,7,3,0,0,
        101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,
        104,106,1,0,0,0,105,69,1,0,0,0,105,92,1,0,0,0,106,10,1,0,0,0,107,
        121,7,10,0,0,108,122,9,0,0,0,109,119,7,11,0,0,110,120,7,12,0,0,111,
        115,7,13,0,0,112,114,7,7,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,
        113,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,117,115,1,0,0,0,118,
        120,6,5,1,0,119,110,1,0,0,0,119,111,1,0,0,0,120,122,1,0,0,0,121,
        108,1,0,0,0,121,109,1,0,0,0,122,123,1,0,0,0,123,124,7,10,0,0,124,
        12,1,0,0,0,125,133,7,14,0,0,126,127,7,11,0,0,127,134,7,11,0,0,128,
        129,7,11,0,0,129,134,7,14,0,0,130,131,7,11,0,0,131,134,8,14,0,0,
        132,134,8,15,0,0,133,126,1,0,0,0,133,128,1,0,0,0,133,130,1,0,0,0,
        133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,
        136,137,1,0,0,0,137,138,7,14,0,0,138,14,1,0,0,0,139,140,7,2,0,0,
        140,141,7,3,0,0,141,142,7,3,0,0,142,143,7,3,0,0,143,144,1,0,0,0,
        144,149,7,16,0,0,145,146,7,4,0,0,146,150,7,2,0,0,147,148,7,17,0,
        0,148,150,7,18,0,0,149,145,1,0,0,0,149,147,1,0,0,0,150,151,1,0,0,
        0,151,158,7,16,0,0,152,153,7,4,0,0,153,159,7,2,0,0,154,155,7,19,
        0,0,155,159,7,3,0,0,156,157,7,20,0,0,157,159,7,21,0,0,158,152,1,
        0,0,0,158,154,1,0,0,0,158,156,1,0,0,0,159,16,1,0,0,0,160,161,7,21,
        0,0,161,165,7,3,0,0,162,163,7,22,0,0,163,165,7,23,0,0,164,160,1,
        0,0,0,164,162,1,0,0,0,165,166,1,0,0,0,166,167,7,24,0,0,167,168,7,
        25,0,0,168,169,7,3,0,0,169,170,1,0,0,0,170,171,7,24,0,0,171,172,
        7,25,0,0,172,173,7,3,0,0,173,180,1,0,0,0,174,176,7,8,0,0,175,177,
        7,3,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,
        1,0,0,0,179,181,1,0,0,0,180,174,1,0,0,0,180,181,1,0,0,0,181,18,1,
        0,0,0,182,183,3,15,7,0,183,184,7,26,0,0,184,185,3,17,8,0,185,20,
        1,0,0,0,186,188,7,1,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,192,
        1,0,0,0,189,191,7,3,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,
        1,0,0,0,192,193,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,195,197,
        7,8,0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,
        7,3,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,
        1,0,0,0,202,210,1,0,0,0,203,204,7,27,0,0,204,211,7,28,0,0,205,206,
        7,13,0,0,206,211,7,28,0,0,207,208,7,29,0,0,208,211,7,28,0,0,209,
        211,7,30,0,0,210,203,1,0,0,0,210,205,1,0,0,0,210,207,1,0,0,0,210,
        209,1,0,0,0,211,22,1,0,0,0,212,213,7,31,0,0,213,214,7,32,0,0,214,
        215,7,13,0,0,215,222,7,9,0,0,216,217,7,33,0,0,217,218,7,34,0,0,218,
        219,7,35,0,0,219,220,7,28,0,0,220,222,7,9,0,0,221,212,1,0,0,0,221,
        216,1,0,0,0,222,24,1,0,0,0,223,224,7,27,0,0,224,225,7,13,0,0,225,
        226,7,35,0,0,226,227,7,35,0,0,227,26,1,0,0,0,34,0,32,37,42,45,51,
        54,61,64,69,76,81,83,88,94,98,103,105,115,119,121,133,135,149,158,
        164,178,180,187,192,196,201,210,221,2,6,0,0,1,5,0
    ]

class Tokenize(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SPACE = 1
    DECIMAL = 2
    OCTAL = 3
    HEXADECIMAL = 4
    FLOAT = 5
    CHAR = 6
    STRING = 7
    DATE = 8
    TIME = 9
    DATETIME = 10
    DURATION = 11
    BOOLEAN = 12
    NULL = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "SPACE", "DECIMAL", "OCTAL", "HEXADECIMAL", "FLOAT", "CHAR", 
            "STRING", "DATE", "TIME", "DATETIME", "DURATION", "BOOLEAN", 
            "NULL" ]

    ruleNames = [ "SPACE", "DECIMAL", "OCTAL", "HEXADECIMAL", "FLOAT", "CHAR", 
                  "STRING", "DATE", "TIME", "DATETIME", "DURATION", "BOOLEAN", 
                  "NULL" ]

    grammarFileName = "Tokenize.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[5] = self.CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            4
     


