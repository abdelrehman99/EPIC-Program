lexer grammar Tokenize;

// ? -> Zero or one * -> Zero or more + -> One or more

SPACE: [ \t\n] -> skip;
// TODO: your lexer grammar here.
DECIMAL: [+-]? [1-9]+ [0-9]+;
OCTAL: [+-]? [0][0-7]+;
HEXADECIMAL: [+-]? [0][x][0-9A-Fa-f]+;
FLOAT:
	[+-]? (
		([0-9]* [.] [0-9]* ([e][+-]?)? [0-9]*)
		| ([0-9]+ [e][+-]? [0-9]+)
	);
CHAR: ['] (. | [\\]( ([\\nt'"]) | ([u][0-9A-Fa-f]* {4}))) ['];
STRING:
	["] (([\\][\\]) | ([\\]["]) | ([\\]~["]) | (~["\\]))+ ["];
DATE: ([1-9][0-9][0-9][0-9]) [-] ([0][1-9] | [1][0-2]) [-] (
		[0][1-9]
		| [1-2][0-9]
		| [3][0-1]
	);
TIME: ([0-1][0-9] | [2][0-3]) [:] ([0-5][0-9]) [:] ([0-5][0-9]) (
		[.][0-9]+
	)?;
DATETIME: DATE [T]TIME;
DURATION: [+-]? ([0-9]* [.]? [0-9]+) (
		[n][s]
		| [u][s]
		| [m][s]
		| [s]
		| [m]
		| [h]
	);
BOOLEAN: ([t][r][u][e]) | ([f][a][l][s][e]);
NULL: [n][u][l][l];